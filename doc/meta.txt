*meta.txt*		A simple list filtering interface for buffer lines

Version: 0.1.0-dev
Author : Tolgraven <github.com/tolgraven>, Lista author: Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Neovim 0.1.7 and above


=============================================================================
CONTENTS						*meta-contents*

INTRODUCTION			|meta-introduction|
USAGE				|meta-usage|
INTERFACE			|meta-interface|
  COMMANDS			|meta-commands|
  VARIABLES			|meta-variables|
  MAPPINGS			|meta-mappings|
  MAPPING-ACTIONS		|meta-mapping-actions|

=============================================================================
INTRODUCTION						*meta-introduction*

*meta* was born from *lista* - a plugin to filter content lines and jump to where you want.
Also inspired by: fzf, nvim s/ preview, yada yada...
Prompt functionality currently built on top of neovim-prompt, also by Alisue.
Much more to come...


=============================================================================
USAGE							*meta-usage*

Type |:Meta| to start filtering and hit <Return> to jump.
It is recommended to assign mappings like:
>
	nnoremap <silent> #  :<C-u>Meta<CR>
	nnoremap <silent> g# :<C-u>MetaCursorWord<CR>
<

=============================================================================
INTERFACE						*meta-interface*

-----------------------------------------------------------------------------
COMMANDS						*meta-commands*

						*:Meta*
						*:MetaCursorWord*
:Meta [{default}]
:MetaCursorWord
	Start a meta interface of the current buffer with {default} or word
	under the cursor.
	With bang will always create a new fresh meta interface.
        This will supercede current :-Resume stuff.
        See |:MetaResume| if you would like to re-use the interface.

						*:MetaResume*
						*:MetaResumeCursorWord*
:MetaResume [{default}]
:MetaResumeCursorWord
	Start a meta interface of the current buffer with {default} or word
	under the cursor.
	It use previous meta interface (e.g. matcher, ignorecase, cursor)
	instead. If no {default} value is specified, it also use the previous
	input.
	See |:Meta| if you would like to use a fresh interface.

-----------------------------------------------------------------------------
VARIABLES						*meta-variables*

						*g:meta#custom_mappings*
g:meta#custom_mappings
	A |List| of custom mappings.
	It define a {lhs} key to a {rhs} key/action with {params}.
	The {params} is a |String| which may contains

	"noremap" -- Stop remapping like |:noremap| in Vim.
	"nowait"  -- Do not wait like |:map-<nowait>| in Vim.
	"expr"    -- Eval like |:map-<expr>| in Vim.

	For example:
>
	let g:meta#custom_mapping = [
	      \ ['<C-f>', '<Left>'],
	      \ ['<C-b>', '<Right>'],
	      \ ['<C-a>', '<Home>'],
	      \ ['<C-e>', '<End>'],
	      \ ['<C-d>', '<Del>'],
	      \ ['<C-P>', '<meta:select_previous_candidate>', 'noremap'],
	      \ ['<C-N>', '<meta:select_next_candidate>', 'noremap'],
	      \ [';', 'pinkyless#stickyshift#enter(";")', 'expr noremap'],
	      \]
<
	Note that "pinkyless#stickyshift#enter()" is a function which is
	provided by a different Vim plugin (lambdalisue/pinkyless.vim).

	See |meta-mapping-actions| to find available mapping actions.

-----------------------------------------------------------------------------
MAPPINGS						*meta-mappings*

All mappings available in a Vim's command line (|ex-edit-index|) and the
following extra mappings are available.

	Key		Description~

	<CR>		Accept the input and return the value
	<C-M>		Accept the input and return the value
	<Esc>		Cancel the input and return 0
	<C-[>		Cancel the input and return 0
	<C-t>		Select previous line
	<PageUp>  	Select previous line
	<S-Tab>  	Select previous line
	<C-g>		Select next line
	<PageDown>	Select next line
	<Tab>		Select next line
	<C-^>		Switch matcher
	<C-6>		Switch a matcher
	<C-_>		Switch 'ignorecase' used in the prompt
	<C-->		Switch 'ignorecase' used in the prompt

To customize your mappings, use |g:meta#custom_mappings| variable.

-----------------------------------------------------------------------------
MAPPING-ACTIONS					*meta-mapping-actions*

The following mapping actions are available.

				*meta-map-accept*
<meta:accept>
	Jump to a corresponding line of selected and exit the interface. 

				*meta-map-assign_next_matched_text*
<meta:assign_next_matched_text>
	Recall next command-line from history that matches pattern in
	front of the cursor.
	Like |c_<Down>| in a native Vim's command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-assign_next_text*
<meta:assign_next_text>
	Recall next command-line from history.
	Like |c_<S-Down>| in a native Vim's command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-assign_previous_matched_text*
<meta:assign_previous_matched_text>
	Recall previous command-line from history that matches
	pattern in front of the cursor.
	Like |c_<Up>| in a native Vim's command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-assign_previous_text*
<meta:assign_previous_text>
	Recall previous command-line from history.
	Like |c_<S-Up>| in a native Vim's command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-cancel*
<meta:cancel>
	Cancel selection and exit the interface. 

				*meta-map-delete_char_before_caret*
<meta:delete_char_before_caret>
	Delete a character before the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_word_before_caret*
<meta:delete_word_before_caret>
	Delete a word before the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_char_after_caret*
<meta:delete_char_after_caret>
	Delete a character after the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_word_after_caret*
<meta:delete_word_after_caret>
	Delete a word after the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_char_under_caret*
<meta:delete_char_under_caret>
	Delete a character under the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_word_under_caret*
<meta:delete_word_under_caret>
	Delete a word under the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_text_before_caret*
<meta:delete_text_before_caret>
	Delete a text before the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_text_after_caret*
<meta:delete_text_after_caret>
	Delete a text after the caret.
	Note this is a neovim-prompt's builtin action.

				*meta-map-delete_entire_text*
<meta:delete_entire_text>
	Delete an entire text.
	Note this is a neovim-prompt's builtin action.

				*meta-map-insert_digraph*
<meta:insert_digraph>
	Insert or overstrike a |digraph| at the caret.
	Like |c_<C-K>| in a Vim's native command-line.
		See also |meta-map-toggle_insert_mode|.
		Note this is a neovim-prompt's builtin action.

				*meta-map-insert_special*
<meta:insert_special>
	Insert or overstrike a special character at the caret.
	Like |c_<C-V>| in a Vim's native command-line.
	See also |meta-map-toggle_insert_mode|.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_left*
<meta:move_caret_to_left>
	Move the caret to a one character left.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_one_word_left*
<meta:move_caret_to_one_word_left>
	Move the caret to a one word left.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_left_anchor*
<meta:move_caret_to_left_anchor>
	Move the caret like |F| in Vim's normal mode.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_right*
<meta:move_caret_to_right>
	Move the caret to a one character right.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_one_word_right*
<meta:move_caret_to_one_word_right>
	Move the caret to a one word right.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_right_anchor*
<meta:move_caret_to_right_anchor>
	Move the caret like |f| in Vim's normal mode.
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_head*
<meta:move_caret_to_head>
	Move the caret to the head (a start of the text.)
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_lead*
<meta:move_caret_to_lead>
	Move the caret to the lead (a first printable character.)
	Note this is a neovim-prompt's builtin action.

				*meta-map-move_caret_to_tail*
<meta:move_caret_to_tail>
	Move the caret to the tail (a end of the text.)
	Note this is a neovim-prompt's builtin action.

				*meta-map-paste_from_register*
<meta:paste_from_register>
	Paste the text from a specified register.
	Like |c_<C-R>| in a Vim's native command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-paste_from_default_register*
<meta:paste_from_default_register>
	Paste the text from a default register (|v:register|).
	Note this is a neovim-prompt's builtin action.

				*meta-map-select_next_candidate*
<meta:select_next_candidate>
	Select next candidate.

				*meta-map-select_previous_candidate*
<meta:select_previous_candidate>
	Select previous candidate.

				*meta-map-switch_case*
<meta:switch_case>
	Switch 'ignorecase' option used in the promopt.

				*meta-map-switch_matcher*
<meta:switch_matcher>
	Switch matcher used in the promopt.

				*meta-map-toggle_insert_mode*
<meta:toggle_insert_mode>
	Toggle insert mode (insert or overstrike).
	Like |c_<Insert>| in a Vim's native command-line.
	Note this is a neovim-prompt's builtin action.

				*meta-map-yank_to_register*
<meta:yank_to_register>
	Yank a text into a specified register.
	Note this is a neovim-prompt's builtin action.

				*meta-map-yank_to_default_register*
<meta:yank_to_default_register>
	Yank a text into a default register (|v:register|).
	Note this is a neovim-prompt's builtin action.

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
